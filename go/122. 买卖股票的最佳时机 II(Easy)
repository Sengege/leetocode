// 初级解法
func maxProfit(prices []int) int {
    var earning int
    for buypoint, sellpoint:=0,1;sellpoint < len(prices);{
        if prices[buypoint] >= prices[sellpoint]{
            buypoint++
            sellpoint++
        }else if sellpoint == (len(prices)-1){
            earning = (earning + prices[sellpoint] - prices[buypoint])
            break
        }else if prices[sellpoint] < prices[sellpoint+1]{
            sellpoint++
        }else{
            earning = (earning + prices[sellpoint] - prices[buypoint])
            buypoint = sellpoint + 1
            sellpoint = sellpoint + 2
        }
    }
    return earning
}

//动态规划解法
func maxProfit(prices []int) int {
    size := len(prices)
    if size <=1 {
        return 0
    }
    dp := make([][2]int, size)

    dp[0][0] = 0 
    dp[0][1] = -prices[0] 
    // dp[i][0]  //持有现金
    // dp[i][1] //持有股票 
    for i := 1; i < size; i++{
        dp[i][0] = Max(prices[i]+dp[i-1][1], dp[i-1][0])
        dp[i][1] = Max(dp[i-1][0] - prices[i], dp[i-1][1])
    }
    return dp[size-1][0]
}

func Max(x, y int) int {
 if x > y {
   return x
 }
 return y
}
